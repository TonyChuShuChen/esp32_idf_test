#ifndef __RMT_CTRL_API_TEST_H__
#define __RMT_CTRL_API_TEST_H__
#include "driver/rmt_ctrl.h"

//RMT DATA BIT CNT
#define RMT_RECV_DATA_BIT_LEN (8)
//if user donot change channel ram size,do not change the define 
#define RMT_EACH_CHANNEL_RAM_SIZE (256) //256 byte


/*--------------------RMT NEC CONFIG----------------------------*/
//nec period
#define NEC_PERIOD_MS (110)//110ms
//START  9ms+4.5ms
#define START_FLAG_DURATION_HIGH_MS (9)//9ms
#define START_FLAG_DURATION_LOW_MS  (4.5)//4.5ms
//LOGIC '1'  0.56ms(1)+1.69ms(0)
#define LOGIC_TRUE_DURATION_HIGH_MS (0.56)//0.56ms
#define LOGIC_TRUE_DURATION_LOW_MS (1.69)//1.69ms
//LOGIC '0' 0.56ms(1)+(0.56)ms(0)
#define LOGIC_FALSE_DURATION_HIGH_MS (0.56)//0.56ms
#define LOGIC_FALSE_DURATION_LOW_MS (0.56)//0.56ms

#define REPEAT_STEP0_MS (START_FLAG_DURATION_HIGH_MS) //9MS
#define REPEAT_STEP1_MS (LOGIC_TRUE_DURATION_HIGH_MS+LOGIC_TRUE_DURATION_LOW_MS)//2.25MS
#define REPEAT_STEP2_MS (LOGIC_FALSE_DURATION_HIGH_MS) //0.56MS
#define REPEAT_STEP3_MS (NEC_PERIOD_MS-REPEAT_STEP0_MS-REPEAT_STEP1_MS-REPEAT_STEP2_MS)
//RMT  OFFSET
#define RMT_RECV_DURATION_OFFSET_MS (0.50)//(0.40)//+-0.32MS
//if the  level variation <0.128ms ,it will be ignored
//#define RMT_RECV_FILTER_THRESHOLD_TIME_MS (0.350)//(0.128) //0.128ms
#define RMT_RECV_FILTER_THRESHOLD_TIME_MS (0.0)//(0.128) //0.128ms

//if beyond 65ms ,the pin not change level,it will trigger interrupt
#define RMT_RECV_INTERRUPT_TIME_MS  (30)//30ms

/*--------------------RMT NEC ----------------------------*/

#define  NEC_PERIOD_TICK_CNT (uint32_t)(NEC_PERIOD_MS*RMT_DIV_CLK_KHZ)

#define START_FLAG_DURATION_HIGH_TCIK_CNT (uint32_t)(START_FLAG_DURATION_HIGH_MS*RMT_DIV_CLK_KHZ)//9*1000/4=0x8ca
#define START_FLAG_DURATION_LOW_TCIK_CNT  (uint32_t)(START_FLAG_DURATION_LOW_MS*RMT_DIV_CLK_KHZ)//4.5*1000/4=0x465

#define LOGIC_TRUE_DURATION_HIGH_TICK_CNT (uint32_t)(LOGIC_TRUE_DURATION_HIGH_MS*RMT_DIV_CLK_KHZ)//0x8c
#define LOGIC_TRUE_DURATION_LOW_TICK_CNT  (uint32_t)(LOGIC_TRUE_DURATION_LOW_MS*RMT_DIV_CLK_KHZ)//0x1a6

#define LOGIC_FALSE_DURATION_HIGH_TICK_CNT (uint32_t)(LOGIC_FALSE_DURATION_HIGH_MS*RMT_DIV_CLK_KHZ)//0x8c
#define LOGIC_FALSE_DURATION_LOW_TICK_CNT (uint32_t)(LOGIC_FALSE_DURATION_LOW_MS*RMT_DIV_CLK_KHZ)//0x8c


#define START_FLAG_DURATION_TICK_CNT (uint32_t)(START_FLAG_DURATION_HIGH_TCIK_CNT+START_FLAG_DURATION_LOW_TCIK_CNT)
#define LOGIC_TRUE_TICK_CNT (uint32_t)(LOGIC_TRUE_DURATION_HIGH_TICK_CNT+LOGIC_TRUE_DURATION_LOW_TICK_CNT)
#define LOIGC_FALSE_TICK_CNT (uint32_t)(LOGIC_FALSE_DURATION_HIGH_TICK_CNT+LOGIC_FALSE_DURATION_LOW_TICK_CNT)


#define REPEAT_STEP0_TICK_CNT (uint32_t)(REPEAT_STEP0_MS*RMT_DIV_CLK_KHZ)
#define REPEAT_STEP1_TICK_CNT (uint32_t)(REPEAT_STEP1_MS*RMT_DIV_CLK_KHZ)
#define REPEAT_STEP2_TICK_CNT (uint32_t)(REPEAT_STEP2_MS*RMT_DIV_CLK_KHZ)
#define REPEAT_STEP3_TICK_CNT (uint32_t)(REPEAT_STEP3_MS*RMT_DIV_CLK_KHZ)

#define RMT_RECV_FILTER_THRESHOLD_TICK_CNT (uint32_t)(RMT_RECV_FILTER_THRESHOLD_TIME_MS* RMT_DIV_CLK_KHZ)//0x57
#define RMT_RECV_DURATION_OFFSET_TICK_CNT (uint32_t)(RMT_RECV_DURATION_OFFSET_MS*RMT_DIV_CLK_KHZ)//0x50
#define RMT_RECV_INTERRUPT_TICK_CNT (uint32_t)(RMT_RECV_INTERRUPT_TIME_MS*RMT_DIV_CLK_KHZ)//0xea6


enum rmt_decode_status{
	FIND_START=0,
	FIND_ADDRESS0,
	FIND_ADDRESS1,
	FIND_COMMAND0,
	FIND_COMMAND1,
	ERR,
};
void nec_test(char* cmd ,int* param);
#endif
